/*------------------------------------*\
    $RWSMITH GRID
\*------------------------------------*/
/**
 * CONTENTS
 * INTRO................How the system works with examples
 * VARS.................Default settings, change as necessary
 * FEATURE-TOGGLE.......Toggle specific grid features
 * MIXINS...............Used for generating width, push & pull classes.
 * GRID-INITIALISE......Build the grid architecture
 * WIDTHS...............Width classes
 * PUSH.................Push classes
 * PULL.................Pull classes
 */





/*------------------------------------*\
    $INRO
\*------------------------------------*/
/**
 * This grid system is designed to be as minimal as possible, using only width,
 * push and pull classes that you actually intend to use via the feature-toggle 
 * section below.
 * The grid settings are located in the $VARS section below.
 *
 * NOTE: This grid system uses responsive suffices on top of the modified 
 * version of the BEM naming convention.
 * Further reading on BEM
 * http://bit.ly/1dM4LGz
 *
 * Responsive suffixes:
 * http://bit.ly/1kT29fI
 *
 * 
 * You can initialise a grid with the class of `grid`
 *
    <div class="grid">
 *
 * This grid system can accept a number of modifier flags which can be activated
 * or deactivated via the feature toggle.  
 * Example:
 *
    <div class="grid grid--no-gutter">
 *
 * Within the grid you can nest grid items.
 *
    <div class="grid">
        <div class="grid__item">
 *
 * These items can than be manipulated with width, push or pull classes.
 * 
  <div class="grid__item one-half">
 *
 * Using responsive suffixes widths, push and pull can be applied for specific
 * breakpoints.
  `class="grid__item one-half@sm-up one-third@md-up"`
 *
 * Push and pull classes can be used to shift the grid item's positioning along
 * the X axis.  They can also be used with responsive suffixes and combined
 * with width classes, which gives an enormous variety of possible combinations.
 * Example:
 *
  `class="grid__item two-thirds@sm-up push-one-third@md-up"`
 *
 * This grid system is infinitely nestable.
 *
 * DEMO
 * http://codepen.io/anon/pen/vNWvyM/
 */






/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Amount of space between grid items
 */
$gutter-width:      1rem !default;

/**
 * Large and small gutters, must be toggled to false under `FEATURE-TOGGLE`.
 * Can be activated on a grid with the modifier flag
 *
  <div class="grid grid--gutter-sm">
 */
$gutter-lg-width:   $gutter-width * 2 !default;
$gutter-sm-width:   $gutter-width / 2 !default;

/**
 * In order to remove unwanted whitespace between grid items due to inline-blocks 
 * the font-size of the grid is set to zero, then on the grid items themselves
 * the font-size will be given the value below - which should be equal to your
 * projects default font size.
 * Any headlines that are descendants of the `grid__item` will inherit their 
 * respective set font-sizes.
 */
$base-font-size:    1rem !default;

/**
 * Media query breakpoints.
 * You can choose how many, the namespace and breakpoint value.
 * Example width class with default values: Note the `@`symbol prepends
 * the namespace.
 *
 `one-half@sm-up two-fifths@lg-up`
 *
 * 1. Namespace for the breakpoint.
 * 2. Value for the breakpoint.
 * You can comment out or remove breakpoints from the list to reduce
 * bloat from the stylesheet, or add additional breakpoints.
 *
 */
$breakpoints: (
    /* [1]       [2] */
    ( lg-up,    1200px ),
    ( md-up,    980px ),
    ( sm-up,    768px ),
    ( xs-up,    480px ),
) !default;




/*------------------------------------*\
    $FEATURE-TOGGLE
\*------------------------------------*/

/** GRID FLAGS */
$use-grid-equal-height:      true !default;
$use-grid-centered:          true !default;
$use-grid-bottom:            true !default;

$use-grid-gutter-sm:         true !default;
$use-grid-gutter-lg:         true !default;
$use-grid-matrix:            true !default;

$use-grid-no-gutter:         true !default;
$use-grid-rev:               true !default;


/** WIDTHS */
$use-width-one-whole:        true !default;
$use-width-one-half:         true !default;
$use-width-one-third:        true !default;
$use-width-two-thirds:       true !default;
$use-width-one-quarter:      true !default;
$use-width-two-quarters:     true !default;
$use-width-three-quarters:   true !default;
$use-width-one-fifth:        true !default;
$use-width-two-fifths:       true !default;
$use-width-three-fifths:     true !default;
$use-width-four-fifths:      true !default;
$use-width-one-sixth:        true !default;
$use-width-two-sixths:       true !default;
$use-width-three-sixths:     true !default;
$use-width-four-sixths:      true !default;
$use-width-five-sixths:      true !default;
$use-width-one-eighth:       true !default;
$use-width-two-eighths:      true !default;
$use-width-three-eighths:    true !default;
$use-width-four-eighths:     true !default;
$use-width-five-eighths:     true !default;
$use-width-six-eighths:      true !default;
$use-width-seven-eighths:    true !default;
$use-width-one-tenth:        true !default;
$use-width-two-tenths:       true !default;
$use-width-three-tenths:     true !default;
$use-width-four-tenths:      true !default;
$use-width-five-tenths:      true !default;
$use-width-six-tenths:       true !default;
$use-width-seven-tenths:     true !default;
$use-width-eight-tenths:     true !default;
$use-width-nine-tenths:      true !default;
$use-width-one-twelfth:      true !default;
$use-width-two-twelfths:     true !default;
$use-width-three-twelfths:   true !default;
$use-width-four-twelfths:    true !default;
$use-width-five-twelfths:    true !default;
$use-width-six-twelfths:     true !default;
$use-width-seven-twelfths:   true !default;
$use-width-eight-twelfths:   true !default;
$use-width-nine-twelfths:    true !default;
$use-width-ten-twelfths:     true !default;
$use-width-eleven-twelfths:  true !default;

/** Pull */
$use-pull-one-whole:         true !default;
$use-pull-one-half:          true !default;
$use-pull-one-third:         true !default;
$use-pull-two-thirds:        true !default;
$use-pull-one-quarter:       true !default;
$use-pull-two-quarters:      true !default;
$use-pull-three-quarters:    true !default;
$use-pull-one-fifth:         true !default;
$use-pull-two-fifths:        true !default;
$use-pull-three-fifths:      true !default;
$use-pull-four-fifths:       true !default;
$use-pull-one-sixth:         true !default;
$use-pull-two-sixths:        true !default;
$use-pull-three-sixths:      true !default;
$use-pull-four-sixths:       true !default;
$use-pull-five-sixths:       true !default;
$use-pull-one-eighth:        true !default;
$use-pull-two-eighths:       true !default;
$use-pull-three-eighths:     true !default;
$use-pull-four-eighths:      true !default;
$use-pull-five-eighths:      true !default;
$use-pull-six-eighths:       true !default;
$use-pull-seven-eighths:     true !default;
$use-pull-one-tenth:         true !default;
$use-pull-two-tenths:        true !default;
$use-pull-three-tenths:      true !default;
$use-pull-four-tenths:       true !default;
$use-pull-five-tenths:       true !default;
$use-pull-six-tenths:        true !default;
$use-pull-seven-tenths:      true !default;
$use-pull-eight-tenths:      true !default;
$use-pull-nine-tenths:       true !default;
$use-pull-one-twelfth:       true !default;
$use-pull-two-twelfths:      true !default;
$use-pull-three-twelfths:    true !default;
$use-pull-four-twelfths:     true !default;
$use-pull-five-twelfths:     true !default;
$use-pull-six-twelfths:      true !default;
$use-pull-seven-twelfths:    true !default;
$use-pull-eight-twelfths:    true !default;
$use-pull-nine-twelfths:     true !default;
$use-pull-ten-twelfths:      true !default;
$use-pull-eleven-twelfths:   true !default;

/** Push */
$use-push-one-whole:         true !default;
$use-push-one-half:          true !default;
$use-push-one-third:         true !default;
$use-push-two-thirds:        true !default;
$use-push-one-quarter:       true !default;
$use-push-two-quarters:      true !default;
$use-push-three-quarters:    true !default;
$use-push-one-fifth:         true !default;
$use-push-two-fifths:        true !default;
$use-push-three-fifths:      true !default;
$use-push-four-fifths:       true !default;
$use-push-one-sixth:         true !default;
$use-push-two-sixths:        true !default;
$use-push-three-sixths:      true !default;
$use-push-four-sixths:       true !default;
$use-push-five-sixths:       true !default;
$use-push-one-eighth:        true !default;
$use-push-two-eighths:       true !default;
$use-push-three-eighths:     true !default;
$use-push-four-eighths:      true !default;
$use-push-five-eighths:      true !default;
$use-push-six-eighths:       true !default;
$use-push-seven-eighths:     true !default;
$use-push-one-tenth:         true !default;
$use-push-two-tenths:        true !default;
$use-push-three-tenths:      true !default;
$use-push-four-tenths:       true !default;
$use-push-five-tenths:       true !default;
$use-push-six-tenths:        true !default;
$use-push-seven-tenths:      true !default;
$use-push-eight-tenths:      true !default;
$use-push-nine-tenths:       true !default;
$use-push-one-twelfth:       true !default;
$use-push-two-twelfths:      true !default;
$use-push-three-twelfths:    true !default;
$use-push-four-twelfths:     true !default;
$use-push-five-twelfths:     true !default;
$use-push-six-twelfths:      true !default;
$use-push-seven-twelfths:    true !default;
$use-push-eight-twelfths:    true !default;
$use-push-nine-twelfths:     true !default;
$use-push-ten-twelfths:      true !default;
$use-push-eleven-twelfths:   true !default;




/**
 * NOTICE..............
 *
 * You should refrain from modifying anything beyond this point,
 * Doing so will likely break the grid system.
 *
 */




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
@mixin set-fractions($property, $fractions, $breakpoint, $namespace: null) {    
    @each $fraction in $fractions {
        @if(nth($fraction,3)) {
            @if $breakpoint {
                .#{$namespace}#{nth($fraction,1)}\@#{nth($breakpoint,1)} {
                    #{$property}: nth($fraction,2)*100%;
                }
            } @else {
                .#{$namespace}#{nth($fraction,1)} {
                    #{$property}: nth($fraction,2)*100%;
                }
            }
        }
    }
}

@mixin make-offsets($property, $fractions, $namespace: null) {
    @include set-fractions($property, $fractions, null, $namespace);
        @if $breakpoints {
            @each $breakpoint in $breakpoints {
            @media (min-width: (nth($breakpoint,2)+1)) {
                @include set-fractions($property, $fractions, $breakpoint, $namespace);
            }
        }
    }
}





/*------------------------------------*\
    $GRID-INITIALISE
\*------------------------------------*/
/**
 * 1. Ensure grid spans full width of parent.
 * 2. Reset any margins and paddings.
 * 3. Set a negative margin-left & right to create space for 
 *    `grid__item`s gutter.
 * 4. Set a zero font-size to remove spacing on the `grid__item` children
 *    caused by them having their display set to `inline-block`.
 * 5. Remove any possible list styling.
 * 6. Optional small gutters. 
 * 7. Optional large gutters.
 * 8. remove the guttering from the grid
 * 9. Set up a grid with for equal height items using flexbox.  
 *    Works for ie10+  IE9 will fallback to the default grid.
 * 10. Fix for IE10 which requires children of flexbox-items to have a
 *    maximum width of 100%.
 * 11. Vertically center grid items
 * 12. Vertically align grid items to the bottom.
 * 13. Reverse the order of the grid items.
 * 14. Matrix spaces out grid items vertically equal to their horizontal spacing.
 */
.grid {
    min-width: 100%; /* [1] */
    margin: 0; /* [2] */
    padding: 0; /* [2] */
    margin-left: -$gutter-width; /* [3] */
    font-size: 0; /* [4] */
    list-style: none; /* [5] */
    @if $use-grid-gutter-sm { /* [6] */
        &--gutter-sm {
            margin-left: -$gutter-sm-width;            
        }
        &--gutter-sm >.grid__item {
            padding-left: $gutter-sm-width;
        }
    }
    @if $use-grid-gutter-lg { /* [7] */
        &--gutter-lg {
            margin-left: -$gutter-lg-width;            
        }
        &--gutter-sm >.grid__item {
            padding-left: $gutter-lg-width;
        }
    }
    @if $use-grid-no-gutter { /* [8] */
        &--no-gutter {
            margin-left: 0;            
        }
        &--no-gutter >.grid__item {
            padding-left: 0;
        }
    }
    @if $use-grid-equal-height { /* 9 */
        &--equal-height,
        &--equal-height>.grid__item,
        &--equal-height--center-content>.grid__item >* {
            display: flex;
            display: -ms-flexbox;
            >* { /** [10] */
                width: 100%;
            }
        }
        &--equal-height {
            flex-wrap: wrap;
            -ms-flex-wrap: wrap;
        }
        &--equal-height--center-content>.grid__item >* {
            /** vertically center content */
            align-items: center;
            justify-content: center;
            -ms-flex-pack: center;
        }
    }
    @if $use-grid-centered {
        &--centered >.grid__item {
            vertical-align: middle; /* [11] */
        }
    }
    @if $use-grid-bottom {
        &--bottom >.grid__item {
            vertical-align: bottom; /* [12] */
        }
    }
    @if $use-grid-rev {
        &--rev { /* [13] */
            direction: rtl;
            text-align:left;
            >.grid__item {
                direction: ltr;
                text-align: left;
            }
        }
    }
    @if $use-grid-matrix {
        &--matrix { /* [14] */
            margin-bottom: -$gutter-width;
            >.grid__item {
                margin-bottom: $gutter-width;
            }
            @if $use-grid-gutter-sm {
                &.grid--gutter-sm {
                    margin-bottom: -$gutter-sm-width;
                    >.grid__item {
                        margin-bottom: $gutter-sm-width;
                    }
                }
            }
            @if $use-grid-gutter-lg {
                &.grid--gutter-lg {
                    margin-bottom: -$gutter-lg-width;
                    >.grid__item {
                        margin-bottom: $gutter-lg-width;
                    }
                }
            }
        }
    }
}

/**
 * 1. Inject the base font-size.  The grid items cannot inherit font-size
 *    As the font-size on the parent `grid` component is set to zero to
 *    avoid spacing issues when using inline-block.
 * 2. Set display to relative to allow the push/pull classes to work
 *    using left/right positioning values.
 * 3. Set display property to inline-block.  Rather than floating blocks
 *    inline-blocks do not have any issues with clearfixing, which is
 *    especially troublesome when dealing with dynamic content resulting
 *    in unequal heights.
 * 4. Set default width of 100%.
 * 5. Prevent item from collapsing when empty.
 * 6. Create the gutter.
 * 7. When grid items are differing heights, align them to the top
 */
.grid__item {
    font-size: $base-font-size; /* [1] */
    
    position: relative; /* [2] */
    display: inline-block; /* [3] */
    width: 100%; /* [4] */
    min-height: 1px; /* [5] */
    padding-left: $gutter-width; /* [6] */
    vertical-align: top; /* [7] */
    text-align: left;
}





/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
$width-fractions: (
    (one-whole,         1,          $use-width-one-whole),

    (one-half,          1/2,        $use-width-one-half),

    (one-third,         1/3,        $use-width-one-third),
    (two-thirds,        2/3,        $use-width-two-thirds),

    (one-quarter,       1/4,        $use-width-one-quarter),
    (two-quarters,      2/4,        $use-width-one-quarter),
    (three-quarters,    3/4,        $use-width-one-quarter),

    (one-fifth,         1/5,        $use-width-one-fifth),
    (two-fifths,        2/5,        $use-width-two-fifths),
    (three-fifths,      3/5,        $use-width-three-fifths),
    (four-fifths,       4/5,        $use-width-four-fifths),

    (one-sixth,         1/6,        $use-width-one-sixth),
    (two-sixths,        2/6,        $use-width-two-sixths),
    (three-sixths,      3/6,        $use-width-three-sixths),
    (four-sixths,       4/6,        $use-width-four-sixths),
    (five-sixths,       5/6,        $use-width-five-sixths),

    (one-eighth,        1/8,        $use-width-one-eighth),
    (two-eighths,       2/8,        $use-width-two-eighths),
    (three-eighths,     3/8,        $use-width-three-eighths),
    (four-eighths,      4/8,        $use-width-four-eighths),
    (five-eighths,      5/8,        $use-width-five-eighths),
    (six-eighths,       6/8,        $use-width-six-eighths),
    (seven-eighths,     7/8,        $use-width-seven-eighths),

    (one-tenth,         1/10,       $use-width-one-tenth),
    (two-tenths,        2/10,       $use-width-two-tenths),
    (three-tenths,      3/10,       $use-width-three-tenths),
    (four-tenths,       4/10,       $use-width-four-tenths),
    (five-tenths,       5/10,       $use-width-five-tenths),
    (six-tenths,        6/10,       $use-width-six-tenths),
    (seven-tenths,      7/10,       $use-width-seven-tenths),
    (eight-tenths,      8/10,       $use-width-eight-tenths),
    (nine-tenths,       9/10,       $use-width-nine-tenths),

    (one-twelfth,       1/12,       $use-width-one-twelfth),
    (two-twelfths,      2/12,       $use-width-two-twelfths),
    (three-twelfths,    3/12,       $use-width-three-twelfths),
    (four-twelfths,     4/12,       $use-width-four-twelfths),
    (five-twelfths,     5/12,       $use-width-five-twelfths),
    (six-twelfths,      6/12,       $use-width-six-twelfths),
    (seven-twelfths,    7/12,       $use-width-seven-twelfths),
    (eight-twelfths,    8/12,       $use-width-eight-twelfths),
    (nine-twelfths,     9/12,       $use-width-nine-twelfths),
    (ten-twelfths,      10/12,      $use-width-ten-twelfths),
    (eleven-twelfths,   11/12,      $use-width-eleven-twelfths),
);

@include make-offsets(width, $width-fractions);




/*------------------------------------*\
    $PUSH
\*------------------------------------*/
$push-fractions: (
    (one-whole,         1,          $use-push-one-whole),

    (one-half,          1/2,        $use-push-one-half),

    (one-third,         1/3,        $use-push-one-third),
    (two-thirds,        2/3,        $use-push-two-thirds),

    (one-quarter,       1/4,        $use-push-one-quarter),
    (two-quarters,      2/4,        $use-push-one-quarter),
    (three-quarters,    3/4,        $use-push-one-quarter),

    (one-fifth,         1/5,        $use-push-one-fifth),
    (two-fifths,        2/5,        $use-push-two-fifths),
    (three-fifths,      3/5,        $use-push-three-fifths),
    (four-fifths,       4/5,        $use-push-four-fifths),

    (one-sixth,         1/6,        $use-push-one-sixth),
    (two-sixths,        2/6,        $use-push-two-sixths),
    (three-sixths,      3/6,        $use-push-three-sixths),
    (four-sixths,       4/6,        $use-push-four-sixths),
    (five-sixths,       5/6,        $use-push-five-sixths),

    (one-eighth,        1/8,        $use-push-one-eighth),
    (two-eighths,       2/8,        $use-push-two-eighths),
    (three-eighths,     3/8,        $use-push-three-eighths),
    (four-eighths,      4/8,        $use-push-four-eighths),
    (five-eighths,      5/8,        $use-push-five-eighths),
    (six-eighths,       6/8,        $use-push-six-eighths),
    (seven-eighths,     7/8,        $use-push-seven-eighths),

    (one-tenth,         1/10,       $use-push-one-tenth),
    (two-tenths,        2/10,       $use-push-two-tenths),
    (three-tenths,      3/10,       $use-push-three-tenths),
    (four-tenths,       4/10,       $use-push-four-tenths),
    (five-tenths,       5/10,       $use-push-five-tenths),
    (six-tenths,        6/10,       $use-push-six-tenths),
    (seven-tenths,      7/10,       $use-push-seven-tenths),
    (eight-tenths,      8/10,       $use-push-eight-tenths),
    (nine-tenths,       9/10,       $use-push-nine-tenths),

    (one-twelfth,       1/12,       $use-push-one-twelfth),
    (two-twelfths,      2/12,       $use-push-two-twelfths),
    (three-twelfths,    3/12,       $use-push-three-twelfths),
    (four-twelfths,     4/12,       $use-push-four-twelfths),
    (five-twelfths,     5/12,       $use-push-five-twelfths),
    (six-twelfths,      6/12,       $use-push-six-twelfths),
    (seven-twelfths,    7/12,       $use-push-seven-twelfths),
    (eight-twelfths,    8/12,       $use-push-eight-twelfths),
    (nine-twelfths,     9/12,       $use-push-nine-twelfths),
    (ten-twelfths,      10/12,      $use-push-ten-twelfths),
    (eleven-twelfths,   11/12,      $use-push-eleven-twelfths),
);

@include make-offsets(left, $push-fractions, push-);





/*------------------------------------*\
    $PULL
\*------------------------------------*/
$pull-fractions: (
    (one-whole,         1,          $use-pull-one-whole),

    (one-half,          1/2,        $use-pull-one-half),

    (one-third,         1/3,        $use-pull-one-third),
    (two-thirds,        2/3,        $use-pull-two-thirds),

    (one-quarter,       1/4,        $use-pull-one-quarter),
    (two-quarters,      2/4,        $use-pull-one-quarter),
    (three-quarters,    3/4,        $use-pull-one-quarter),

    (one-fifth,         1/5,        $use-pull-one-fifth),
    (two-fifths,        2/5,        $use-pull-two-fifths),
    (three-fifths,      3/5,        $use-pull-three-fifths),
    (four-fifths,       4/5,        $use-pull-four-fifths),

    (one-sixth,         1/6,        $use-pull-one-sixth),
    (two-sixths,        2/6,        $use-pull-two-sixths),
    (three-sixths,      3/6,        $use-pull-three-sixths),
    (four-sixths,       4/6,        $use-pull-four-sixths),
    (five-sixths,       5/6,        $use-pull-five-sixths),

    (one-eighth,        1/8,        $use-pull-one-eighth),
    (two-eighths,       2/8,        $use-pull-two-eighths),
    (three-eighths,     3/8,        $use-pull-three-eighths),
    (four-eighths,      4/8,        $use-pull-four-eighths),
    (five-eighths,      5/8,        $use-pull-five-eighths),
    (six-eighths,       6/8,        $use-pull-six-eighths),
    (seven-eighths,     7/8,        $use-pull-seven-eighths),

    (one-tenth,         1/10,       $use-pull-one-tenth),
    (two-tenths,        2/10,       $use-pull-two-tenths),
    (three-tenths,      3/10,       $use-pull-three-tenths),
    (four-tenths,       4/10,       $use-pull-four-tenths),
    (five-tenths,       5/10,       $use-pull-five-tenths),
    (six-tenths,        6/10,       $use-pull-six-tenths),
    (seven-tenths,      7/10,       $use-pull-seven-tenths),
    (eight-tenths,      8/10,       $use-pull-eight-tenths),
    (nine-tenths,       9/10,       $use-pull-nine-tenths),

    (one-twelfth,       1/12,       $use-pull-one-twelfth),
    (two-twelfths,      2/12,       $use-pull-two-twelfths),
    (three-twelfths,    3/12,       $use-pull-three-twelfths),
    (four-twelfths,     4/12,       $use-pull-four-twelfths),
    (five-twelfths,     5/12,       $use-pull-five-twelfths),
    (six-twelfths,      6/12,       $use-pull-six-twelfths),
    (seven-twelfths,    7/12,       $use-pull-seven-twelfths),
    (eight-twelfths,    8/12,       $use-pull-eight-twelfths),
    (nine-twelfths,     9/12,       $use-pull-nine-twelfths),
    (ten-twelfths,      10/12,      $use-pull-ten-twelfths),
    (eleven-twelfths,   11/12,      $use-pull-eleven-twelfths),
);

@include make-offsets(right, $pull-fractions, pull-);
